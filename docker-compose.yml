version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: log-database
    environment:
      POSTGRES_USER: loguser
      POSTGRES_PASSWORD: logpass
      POSTGRES_DB: logdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loguser -d logdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - log-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: log-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      APP_PORT: 3001
      APP_URL: http://localhost:3001
      FRONTEND_URL: http://localhost:3000
      DATABASE_URL: postgresql://loguser:logpass@db:5432/logdb
      JWT_SECRET: your-jwt-secret-change-in-production
      SESSION_SECRET: your-session-secret-change-in-production
      CORS_ORIGIN: http://localhost:3000
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      APPLE_CLIENT_ID: ${APPLE_CLIENT_ID}
      APPLE_CLIENT_SECRET: ${APPLE_CLIENT_SECRET}
      RESEND_API_KEY: ${RESEND_API_KEY}
      RESEND_FROM_EMAIL: ${RESEND_FROM_EMAIL}
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads-data:/app/uploads
    networks:
      - log-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: log-frontend
    environment:
      VITE_API_URL: http://localhost:3001
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - log-network
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  uploads-data:
    driver: local

networks:
  log-network:
    driver: bridge
